#!/usr/bin/env python3
# -*- mode: python; -*-
#
# Copyright 2014 Canonical, Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

""" CLI for creating lxc containers needed by the installer """

import argparse
import sys
import os
import logging
from cloudinstall.log import setup_logger
import cloudinstall.utils as utils
from cloudinstall.gui import PegasusGUI, InstallHeader
from cloudinstall.install import InstallController
from cloudinstall.config import Config
from cloudinstall import __version__ as version


def parse_options(argv, cfg):
    parser = argparse.ArgumentParser(description='Ubuntu Openstack Installer',
                                     prog='openstack-install')
    parser.add_argument('-i', '--install-only', action='store_true',
                        dest='install_only', default=False,
                        help='install and bootstrap MAAS/Juju/Landscape '
                        '(as applicable) only. '
                        'Will not deploy any OpenStack services '
                        'in single or multi mode. '
                        'You can invoke openstack-status manually to '
                        'continue.')
    parser.add_argument('-u', '--uninstall', action='store_true',
                        dest='uninstall', default=False,
                        help='Uninstalls the current cloud including removing '
                        'of packages.')
    parser.add_argument('-k', '--kill', action='store_true',
                        dest='killcloud', default=False,
                        help='Tear down existing cloud leaving userdata '
                        'in place. Useful for iterative deploys.')
    parser.add_argument('-a', type=str, default=None,
                        help='<arch, ..> comma-separated list of '
                        'architectures to filter available cloud '
                        'images with which to populate Glance, '
                        'e.g. amd64,arm64', dest='arch')
    parser.add_argument('-r', type=str, default=None, dest='release',
                        help='<rel, ..> comma-separated list of Ubuntu '
                        'releases to filter available cloud images with '
                        'which to populate Glance, e.g. precise,trusty')
    parser.add_argument('-p', '--placement', action='store_true',
                        dest='edit_placement', default=False,
                        help='Show machine placement UI before deploying')
    parser.add_argument('--extra-ppa', nargs='+', dest='extra_ppa',
                        help='Append additional ppas to the single installers '
                        'cloud-init configuration.')
    parser.add_argument(
        '--version', action='version', version='%(prog)s {}'.format(version))

    subparsers = parser.add_subparsers(
        title='actions',
        description='valid actions for installer',
        help='additional help',
        dest='command')

    # headless
    parser_headless = subparsers.add_parser('headless',
                                            help='Run a headless install')
    parser_headless.add_argument('--net-interface', type=str,
                                 dest='net_interface', metavar="NIC",
                                 help='Specify network interface used for '
                                 'MAAS to manage DHCP/DNS.')
    parser_headless.add_argument('--maas-server', type=str,
                                 dest='maas_server', metavar="IP",
                                 help='Specify an existing MAAS IP address')
    parser_headless.add_argument('--maas-apikey', type=str,
                                 dest='maas_apikey', metavar="KEY",
                                 help='Specify a MAAS admin user apikey')
    parser_headless.add_argument('--openstack-password', type=str,
                                 dest='openstack_password',
                                 help='Your OpenStack password')
    parser_headless.add_argument('--landscape-email', type=str,
                                 dest='landscape_email',
                                 help='E-mail to register with Landscape')
    parser_headless.add_argument('--landscape-username', type=str,
                                 dest='landscape_username',
                                 help='Admin user to register with Landscape')
    parser_headless.add_argument('--install-type', type=str,
                                 dest='install_type',
                                 choices=[x[0] for x in cfg.install_types],
                                 help='Specify install type')

    return parser.parse_args(argv)


if __name__ == '__main__':
    try:
        setup_logger()
    except PermissionError:
        print("Permission error accessing log file.\n"
              "This probably indicates a broken partial install.\n"
              "Please use 'openstack-install -u' to uninstall, "
              "and try again.\n"
              "(You may want to save a copy of ~/.cloud-install/commands.log"
              " for reporting a bug.)")
        sys.exit()

    logger = logging.getLogger('cloudinstall')
    cfg = Config()
    opts = parse_options(sys.argv[1:], cfg)

    if os.geteuid() != 0:
        sys.exit(
            "Installing a cloud requires root privileges. Rerun with sudo")

    if opts.uninstall:
        msg = ("Warning:\n\nThis will uninstall OpenStack and "
               "make a best effort to return the system back "
               "to its original state.")
        print(msg)
        yn = input("Proceed? [y/N] ")
        if "y" in yn or "Y" in yn:
            logger.info("Restoring system to last known state.")
            os.execl('/usr/share/openstack/tools/openstack-uninstall', '')
        else:
            raise SystemExit("Uninstall canceled.")

    if opts.killcloud:
        if cfg.is_single:
            logger.info("Removing existing single installation.")
            utils.container_stop('uoi-bootstrap')
            utils.container_destroy('uoi-bootstrap')
            if os.path.isfile(os.path.join(cfg.cfg_path, 'installed')):
                os.remove(os.path.join(cfg.cfg_path, 'installed'))
            raise SystemExit
        else:
            raise SystemExit('Only supports killing a single install for now.')

    if not os.path.exists(cfg.cfg_path):
        os.makedirs(cfg.cfg_path)

    if os.path.isfile(os.path.join(cfg.cfg_path, 'installed')):
        msg = ("\n\nError:\n\n"
               "Previous installation detected. Did you mean to run "
               "openstack-status instead? \n"
               "If attempting to re-install please remove "
               "~/.cloud-install or move it to a different \n"
               "directory name (eg ~/cloud-install-old). "
               "Otherwise you may wish to uninstall with:\n\n"
               "    $ sudo openstack-install -u\n\n")
        raise SystemExit(msg)

    install = InstallController(
        ui=PegasusGUI(header=InstallHeader()), opts=opts)
    logger.info("cloud-install starting with options: {}".format(opts))

    install.start()
